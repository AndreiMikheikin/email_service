name: Деплой email-service с SSR

on:
  push:
    branches: [master]
    paths:
      - 'src/**'
      - 'sql/**'
      - 'apps/admin-spa/**'
      - 'apps/client-spa/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/email_service_deploy.yml'

env:
  SSH_HOST: 178.250.247.67
  DEPLOY_DIR: /root/email-service
  WEB_ROOT: /var/www/email-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    # 1. Клонирование репозитория
    - name: Клонирование репозитория
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. Настройка Node.js
    - name: Установка Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    # 3. Кэш зависимостей для admin-spa
    - name: Кэш зависимостей admin-spa
      uses: actions/cache@v4
      with:
        path: ./apps/admin-spa/node_modules
        key: admin-spa-${{ hashFiles('apps/admin-spa/package-lock.json') }}
        restore-keys: admin-spa-

    # 4. Кэш зависимостей client-spa
    - name: Кэш зависимостей client-spa
      uses: actions/cache@v4
      with:
        path: ./apps/client-spa/node_modules
        key: client-spa-${{ hashFiles('apps/client-spa/package-lock.json') }}
        restore-keys: client-spa-

    # 5. Установка зависимостей
    - name: Установка зависимостей (root)
      run: npm ci --ignore-scripts

    - name: Установка зависимостей (admin-spa)
      working-directory: ./apps/admin-spa
      run: npm ci --include=dev

    - name: Установка зависимостей (client-spa)
      working-directory: ./apps/client-spa
      run: npm ci --include=dev

    # 6. Сборка проектов
    - name: Сборка admin-spa (SSR)
      working-directory: ./apps/admin-spa
      run: |
        npm run build:client
        npm run build:server
        [ -f dist/client/index.html ] || { echo "❌ Ошибка сборки client-части admin-spa"; exit 1; }
        [ -f dist/server/entry-server.js ] || { echo "❌ Ошибка сборки server-части admin-spa"; exit 1; }

    - name: Сборка client-spa (SPA)
      working-directory: ./apps/client-spa
      run: |
        npm run build
        [ -f dist/index.html ] || { echo "❌ Ошибка сборки client-spa"; exit 1; }

    # 7. Подготовка артефактов для деплоя
    - name: Подготовка артефактов
      run: |
        mkdir -p deployment
        cp -r src sql package.json package-lock.json deployment/

        mkdir -p deployment/apps/admin-spa
        cp apps/admin-spa/{server.js,package.json,package-lock.json} deployment/apps/admin-spa/
        cp -r apps/admin-spa/dist deployment/apps/admin-spa/

        mkdir -p deployment/apps/client-spa
        cp -r apps/client-spa/dist deployment/apps/client-spa/

        tree deployment -L 3

    # 8. Настройка SSH
    - name: Настройка SSH-доступа
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    # 9. Передача .env файлов (из secrets)
    - name: Передача .env файлов
      run: |
        echo "$ADMIN_ENV" > .env.admin
        echo "$CLIENT_ENV" > .env.client
        scp .env.admin root@$SSH_HOST:$DEPLOY_DIR/apps/admin-spa/.env
        scp .env.client root@$SSH_HOST:$DEPLOY_DIR/apps/client-spa/.env
      env:
        ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
        CLIENT_ENV: ${{ secrets.CLIENT_ENV }}

    # 10. Копирование файлов на сервер
    - name: Деплой основного кода
      run: rsync -az --delete --progress deployment/ root@$SSH_HOST:$DEPLOY_DIR/

    - name: Деплой admin-spa статики
      run: rsync -az --delete --progress deployment/apps/admin-spa/dist/client/ root@$SSH_HOST:$WEB_ROOT/admin-spa/

    - name: Деплой client-spa статики
      run: rsync -az --delete --progress deployment/apps/client-spa/dist/ root@$SSH_HOST:$WEB_ROOT/client-spa/

    # 11. Настройка и перезапуск сервисов на сервере
    - name: Настройка окружения и перезапуск
      run: |
        ssh root@$SSH_HOST "
          set -e
          
          echo 'Установка зависимостей (root)...'
          cd $DEPLOY_DIR && npm ci --production --ignore-scripts

          echo 'Настройка admin-spa...'
          cd $DEPLOY_DIR/apps/admin-spa && npm ci --production

          echo 'Настройка client-spa...'
          cd $DEPLOY_DIR/apps/client-spa && npm ci --production

          echo 'Права на папки...'
          chown -R www-data:www-data $WEB_ROOT
          find $WEB_ROOT -type d -exec chmod 755 {} \;
          find $WEB_ROOT -type f -exec chmod 644 {} \;

          echo 'Рестарт сервисов...'
          pm2 restart admin-spa-ssr || pm2 start $DEPLOY_DIR/apps/admin-spa/server.js --name admin-spa-ssr
          systemctl restart nginx

          echo 'Компрессия статики (если есть скрипт)...'
          [ -f $DEPLOY_DIR/src/jobs/compress-static.js ] && node $DEPLOY_DIR/src/jobs/compress-static.js 4 --yes || echo 'Скрипт компрессии не найден'
        "

    # 12. Проверка деплоя
    - name: Проверка деплоя
      run: |
        ssh root@$SSH_HOST "
          echo '=== Статус PM2 ==='
          pm2 list

          echo '=== Статус Nginx ==='
          systemctl status nginx --no-pager

          echo '=== Файлы статики admin-spa ==='
          ls -la $WEB_ROOT/admin-spa/assets/

          echo '=== Проверка SSR ==='
          curl -sSf http://localhost:3344/admin-spa/ >/dev/null && echo '✅ SSR работает' || echo '❌ Ошибка SSR'

          echo '=== Проверка client-spa (опционально) ==='
          curl -sSf http://localhost:3344/client-spa/ >/dev/null && echo '✅ Client SPA работает' || echo '⚠️ Client SPA недоступен или отключён'
        "

    # 13. Очистка SSH-ключа (всегда выполняется)
    - name: Очистка SSH-ключа
      if: always()
      run: rm -f ~/.ssh/id_rsa

    # 14. Компрессия статики (после деплоя)
    - name: Компрессия статики (финальный вызов)
      run: |
        ssh root@$SSH_HOST "
          echo '=== Финальная компрессия ==='
          node /root/email-service/src/jobs/compress-static.js 4 --yes || echo '⚠️ Компрессия завершилась с ошибкой'
        "
