name: Deploy Email Service with SSR

on:
  push:
    branches: [master]
    paths:
      - 'src/**'
      - 'sql/**'
      - 'apps/admin-spa/**'
      - 'apps/client-spa/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/email_service_deploy.yml'

env:
  SSH_HOST: 178.250.247.67
  DEPLOY_DIR: /root/email-service
  WEB_ROOT: /var/www/email-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    # 1. Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. Установка Node.js
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    # 3. Установка зависимостей
    - name: Install root dependencies
      run: npm ci --ignore-scripts

    - name: Install admin-spa dependencies
      working-directory: ./apps/admin-spa
      run: npm ci --include=dev

    - name: Install client-spa dependencies
      working-directory: ./apps/client-spa
      run: npm ci --include=dev

    # 4. Сборка проектов
    - name: Build admin-spa (SSR)
      working-directory: ./apps/admin-spa
      run: |
        npm run build:client
        npm run build:server
        [ -f dist/client/index.html ] || { echo "❌ Admin SPA client build failed"; exit 1; }
        [ -f dist/server/entry-server.js ] || { echo "❌ Admin SPA server build failed"; exit 1; }

    - name: Build client-spa (SPA)
      working-directory: ./apps/client-spa
      run: |
        npm run build
        [ -f dist/index.html ] || { echo "❌ Client SPA build failed"; exit 1; }

    # 5. Подготовка артефактов
    - name: Prepare deployment artifacts
      run: |
        mkdir -p deployment
        cp -r src sql package.json package-lock.json deployment/

        mkdir -p deployment/apps/admin-spa
        cp apps/admin-spa/{server.js,package.json,package-lock.json} deployment/apps/admin-spa/
        cp -r apps/admin-spa/dist deployment/apps/admin-spa/

        mkdir -p deployment/apps/client-spa
        cp -r apps/client-spa/dist deployment/apps/client-spa/

        tree deployment -L 3

    # 6. Настройка SSH
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    # 7. Копирование .env файла
    - name: Копирование .env для admin-spa
      run: |
        echo "$ADMIN_ENV" > .env.admin
        ssh root@$SSH_HOST "mkdir -p $DEPLOY_DIR/apps/admin-spa"
        scp .env.admin root@$SSH_HOST:$DEPLOY_DIR/apps/admin-spa/.env
      env:
        ADMIN_ENV: ${{ secrets.ADMIN_ENV }}

    # 8. Деплой артефактов
    - name: Deploy core
      run: rsync -az --delete --progress deployment/ root@$SSH_HOST:$DEPLOY_DIR/

    - name: Deploy admin-spa assets
      run: rsync -az --delete --progress deployment/apps/admin-spa/dist/client/ root@$SSH_HOST:$WEB_ROOT/admin-spa/

    - name: Deploy client-spa assets
      run: rsync -az --delete --progress deployment/apps/client-spa/dist/ root@$SSH_HOST:$WEB_ROOT/client-spa/

    # 9. Установка зависимостей и запуск
    - name: Setup production environment
      run: |
        ssh root@$SSH_HOST "
          set -e

          echo 'Установка зависимостей корня...'
          cd $DEPLOY_DIR && npm ci --production --ignore-scripts

          echo 'Установка admin-spa...'
          cd $DEPLOY_DIR/apps/admin-spa
          npm ci --production

          echo 'Установка client-spa...'
          cd $DEPLOY_DIR/apps/client-spa
          npm ci --production

          echo 'Права доступа...'
          chown -R www-data:www-data $WEB_ROOT
          find $WEB_ROOT -type d -exec chmod 755 {} \;
          find $WEB_ROOT -type f -exec chmod 644 {} \;

          echo 'Перезапуск сервисов...'
          pm2 restart admin-spa-ssr || pm2 start $DEPLOY_DIR/apps/admin-spa/server.js --name admin-spa-ssr
          systemctl restart nginx
        "

    # 10. Проверка деплоя
    - name: Verify deployment
      run: |
        ssh root@$SSH_HOST "
          echo '=== Статус PM2 ==='
          pm2 list

          echo '=== Статус Nginx ==='
          systemctl status nginx --no-pager

          echo '=== Статика admin-spa ==='
          ls -la $WEB_ROOT/admin-spa/assets/

          echo '=== Проверка SSR ==='
          curl -sSf http://localhost:3344/admin-spa/ >/dev/null && echo '✅ SSR работает' || echo '❌ SSR не отвечает'

          echo '=== Проверка client-spa ==='
          curl -sSf http://localhost:3344/client-spa/ >/dev/null && echo '✅ Client работает' || echo '⚠️ Client SPA может быть отключён'
        "

    # 11. Финальная компрессия статики
    - name: Компрессия статики
      run: |
        ssh root@$SSH_HOST "
          echo '=== Финальная компрессия ==='
          node /root/email-service/src/jobs/compress-static.js 4 --yes || echo '⚠️ Компрессия завершилась с ошибкой'
        "

    # 12. Очистка ключей
    - name: Очистка SSH ключей
      if: always()
      run: rm -f ~/.ssh/id_rsa
